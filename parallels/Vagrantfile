# -*- mode: ruby -*-
# vi: set ft=ruby :

### Configurations 
# [VM] name, cpus, memory(MB), private_net(host noly) ip
# [OS] root-password, http(s)_proxy, packages to install
######################

vms = {
  :centos7 => ['bento/centos-7', '1', '2048'],
  :centos8 => ['bento/centos-8', '1', '2048'],
  :debian10 => ['bento/debian-10', '1', '2048'],
  :debian11 => ['bento/debian-11', '1', '2048'],
  :ubuntu18 => ['bento/ubuntu-18.04', '1', '2048'],
  :ubuntu20 => ['bento/ubuntu-20.04', '1', '2048'],
}

# A new user you want to create besides "vagrant"
# If blank(""), the ssh-passwordless will be set on user "root"
new_user = "kang"

# Packages you want to install during provisioning
# If not blank(""), the installation process may cost more time
# packages_preinstalled = "vim curl wget tree"
packages_preinstalled = ""

# Linked clone (`true` for temporary usage)
linked_clone = false

# Make dynamic IP address to static IP, useful running server-like applications
make_dhcp_static = true

# Turn on/off nested virtulization
nested_virtulization = false

pvurl_prefix="https://gitee.com/get-set/myboxes/raw/master/provisioning"
######################
### End of Configurations

### Config Virtualbox and VMs.
######################
Vagrant.configure("2") do |config|

  # The following three config needs vagrant-hostmanager plugin installed: 'vagrant plugin install vagrant-hostmanager'
  config.hostmanager.enabled = true
  # config.hostmanager.manage_host = true
  config.hostmanager.manage_guest = true

  config.vm.box_check_update = false

  # common configurations
  config.vm.provider "parallels" do |prl|
    prl.linked_clone = linked_clone
    prl.check_guest_tools = false

    ### find configurations at https://download.parallels.com/desktop/v16/docs/en_US/Parallels%20Desktop%20Pro%20Edition%20Command-Line%20Reference.pdf
    # Videos
    prl.customize ["set", :id, "--3d-accelerate", "off"]
    prl.customize ["set", :id, "--vertical-sync", "off"]
    prl.customize ["set", :id, "--high-resolution", "off"]

    # Mouse & Keyboard
    prl.customize ["set", :id, "--smart-mouse-optimize", "off"]
    prl.customize ["set", :id, "--keyboard-optimize", "off"]

    # Startup & Shutdown
    prl.customize ["set", :id, "--autostart", "off"] # <off | open-window | start-app | start-host | user-login>
    # prl.customize ["set", :id, "--autostart-delay", "60"]  # seconds
    prl.customize ["set", :id, "--autostop", "suspend"] # <suspend | shutdown>
    prl.customize ["set", :id, "--startup-view", "headless"] # <suspend | shutdown>
    prl.customize ["set", :id, "--on-shutdown", "close"] # <window | close | quit>
    prl.customize ["set", :id, "--on-window-close", "keep-running"] # <suspend | shutdown | stop | ask | keep-running>

    # Sharing
    prl.customize ["set", :id, "--shared-profile", "off"]
    prl.customize ["set", :id, "--sh-app-host-to-guest", "off"]
    prl.customize ["set", :id, "--sh-app-guest-to-host", "off"]

    # Optimization
    prl.customize ["set", :id, "--longer-battery-life", "on"]
    if nested_virtulization
      prl.customize ["set", :id, "--hypervisor-type", "parallels"]
      prl.customize ["set", :id, "--nested-virt", "on"]
    end

  end

  ### Configurations for each VM.
  vms.each do |m_name, m_config|
    config.vm.define "#{m_name}" do |m|

      # m.vm.synced_folder "~/", "/media/psf/Home"

      m.vm.box = "#{m_config[0]}"
      m.vm.hostname = "#{m_name}"

      m.vm.provider "parallels" do |prl|
        prl.name = "#{m_name}"
        prl.memory = "#{m_config[2]}"
        prl.cpus = "#{m_config[1]}"
      end

      ### Provisionings that will be executed
      # Basic OS configurations: root password, mirrors, etc.
      m.vm.provision "file", source: "~/.ssh", destination: "/tmp/host.ssh"
      m.vm.provision "prepare os", type: "shell" do |s|
        s.path = "#{pvurl_prefix}/shell/bootstrap-os.sh"
        s.args = ["#{new_user}","#{packages_preinstalled}"]
      end

      if make_dhcp_static
        # The first NIC is set to DHCP by default, use the following script to set to STATIC, with IP address not changed.
        m.vm.provision "dhcp to static", type: "shell", path: "#{pvurl_prefix}/shell/dhcp2static.sh"
      end
      
    end
  end

end
