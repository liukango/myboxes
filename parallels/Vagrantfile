# -*- mode: ruby -*-
# vi: set ft=ruby :


### Configurations 
# [VM] name, cpus, memory(MB), private_net(host noly) ip
# [OS] root-password, http(s)_proxy, packages to install
######################

vms = {
  :centos => ['generic/centos8', '1', '2048', '10.3.3.5'],
  :debian => ['generic/debian10', '1', '2048', '10.3.3.6'],
  :ubuntu => ['generic/ubuntu2004', '1', '2048', '10.3.3.7'],
}
# Packages you want to install during provisioning
packages_preinstalled = "vim git curl wget tree"
# Turn on/off nested virtulization
nested_virtulization = "off"
# Make dynamic IP address to static IP, useful running server-like applications
make_dhcp_static = true
pvurl_prefix="https://gitee.com/get-set/myboxes/raw/master/provisioning"
######################
### End of Configurations

### Config Virtualbox and VMs.
######################
Vagrant.configure("2") do |config|

  # The following three config needs vagrant-hostmanager plugin installed: 'vagrant plugin install vagrant-hostmanager'
  # config.hostmanager.enabled = true
  # config.hostmanager.manage_host = true
  # config.hostmanager.manage_guest = true

  config.vm.box_check_update = false

  # common configurations
  config.vm.provider "parallels" do |prl|
    prl.check_guest_tools = false

    # find configurations at https://download.parallels.com/desktop/v16/docs/en_US/Parallels%20Desktop%20Pro%20Edition%20Command-Line%20Reference.pdf
    prl.customize ["set", :id, "--3d-accelerate", "off"]
    prl.customize ["set", :id, "--vertical-sync", "off"]
    prl.customize ["set", :id, "--high-resolution", "off"]
    # --autostart <off | open-window | start-app | start-host | user-login>
    prl.customize ["set", :id, "--autostart", "off"]
    # prl.customize ["set", :id, "--autostart-delay", "60"]  # seconds
    prl.customize ["set", :id, "--adaptive-hypervisor", "on"]
    prl.customize ["set", :id, "--nested-virt", "#{nested_virtulization}"]
    prl.customize ["set", :id, "--pmu-virt", "#{nested_virtulization}"]
    prl.customize ["set", :id, "--sync-host-printers", "off"]
    prl.customize ["set", :id, "--smart-mouse-optimize", "off"]
    prl.customize ["set", :id, "--keyboard-optimize", "off"]

  end

  ### Configurations for each VM.
  vms.each do |m_name, m_config|
    config.vm.define "#{m_name}" do |m|

      # m.vm.synced_folder "~/", "/media/psf/Home"

      m.vm.box = "#{m_config[0]}"
      m.vm.hostname = "#{m_name}"

      # The second nic, the first one is "Share" network
      #m.vm.network "private_network", ip: "#{m_config[3]}"

      m.vm.provider "parallels" do |prl|
        prl.name = "#{m_name}"
        prl.memory = "#{m_config[2]}"
        prl.cpus = "#{m_config[1]}"
      end

      ### Provisionings that will be executed
      # Basic OS configurations: root password, mirrors, etc.
      m.vm.provision "file", source: "~/.ssh", destination: "/tmp/host.ssh"
      m.vm.provision "prepare os", type: "shell" do |s|
        s.path = "#{pvurl_prefix}/shell/bootstrap-os.sh"
        s.args = ["#{packages_preinstalled}"]
      end

      if make_dhcp_static
        # The first NIC is set to DHCP by default, use the following script to set to STATIC, with IP address not changed.
        m.vm.provision "dhcp to static", type: "shell", path: "#{pvurl_prefix}/shell/dhcp2static.sh"
      end
      
    end
  end

end
