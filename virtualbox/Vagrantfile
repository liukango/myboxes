# -*- mode: ruby -*-
# vi: set ft=ruby :

### Configurations 
# [VM] name, cpus, memory(MB)
######################
group = "templates"
vms = {
  :centos7 => ['bento/centos-7', '1', '2048'],
  :centos8 => ['bento/centos-8', '1', '2048'],
  :debian10 => ['bento/debian-10', '1', '2048'],
  :debian11 => ['bento/debian-11', '1', '2048'],
  :ubuntu18 => ['bento/ubuntu-18.04', '1', '2048'],
  :ubuntu20 => ['bento/ubuntu-20.04', '1', '2048'],
  # If specify private network IP address
  #:with_ip => ['bento/ubuntu-20.04', '1', '2048', '10.3.3.3'],
}

# A new user you want to create on uid=666 and gid=666
my_user = "kang"

# Packages you want to install during provisioning
# If not blank(""), the installation process may cost more time
# packages_preinstalled = "vim curl wget tree"
packages_preinstalled = ""

# Linked clone (`true` for temporary usage)
linked_clone = false

# Make dynamic IP address to static IP, useful running server-like applications
make_dhcp_static = true

# Turn on/off nested virtulization
nested_virtulization = "off"

pvurl_prefix="https://gitee.com/get-set/myboxes/raw/master/provisioning"
######################
### End of Configurations

### Config Virtualbox and VMs.
######################
Vagrant.configure("2") do |config|

  # The following three config needs vagrant-hostmanager plugin installed: 'vagrant plugin install vagrant-hostmanager'.
  # hostmanager is disabled by default, we can use command `vagrant hostmanager` to update `/etc/hosts` at any time.
  config.hostmanager.enabled = false
  config.hostmanager.manage_host = true
  config.hostmanager.manage_guest = false
  config.hostmanager.ip_resolver = proc do |vm, resolving_vm|
    if hostname = (vm.ssh_info && vm.ssh_info[:host])
      `VBoxManage guestproperty get #{vm.id} "/VirtualBox/GuestInfo/Net/1/V4/IP"`.split()[1]
    end
  end

  config.vm.box_check_update = false

  # common configurations
  config.vm.provider "virtualbox" do |vb|
    vb.linked_clone = linked_clone
    vb.customize ["modifyvm", :id, "--groups", "/#{group}"]
    vb.customize ["modifyvm", :id, "--nested-hw-virt", "#{nested_virtulization}"]
    # pagefusion cannot be enabled on MacOS.
    vb.customize ["modifyvm", :id, "--pagefusion", "on"]
  end

  ### Configurations for each VM.
  vms.each do |m_name, m_config|
    config.vm.define "#{m_name}" do |m|

      m.vm.box = "#{m_config[0]}"
      m.vm.hostname = "#{m_name}"

      # The second nic, the first one is "Share" network
      # If specify IP address:
      # m.vm.network "private_network", ip: "#{m_config[3]}"
      m.vm.network "private_network", type: "dhcp"

      m.vm.provider "virtualbox" do |vm|
        vm.name = "#{m_name}"
        vm.memory = "#{m_config[2]}"
        vm.cpus = "#{m_config[1]}"
      end

      # m.vm.synced_folder "~/", "/host/home", mount_options: ["uid=666", "gid=666"]

      ### Provisionings that will be executed
      # Basic OS configurations: root password, mirrors, etc.
      m.vm.provision "file", source: "~/.ssh", destination: "/tmp/host.ssh"
      m.vm.provision "prepare os", type: "shell" do |s|
        s.path = "#{pvurl_prefix}/shell/bootstrap-os.sh"
        s.args = ["#{my_user}","#{packages_preinstalled}"]
      end

      if make_dhcp_static
        # The first NIC is set to DHCP by default, use the following script to set to STATIC, with IP address not changed.
        m.vm.provision "dhcp to static", type: "shell", path: "#{pvurl_prefix}/shell/dhcp2static.sh"
      end

    end
  end

end
